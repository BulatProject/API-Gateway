# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Run checks

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 flake8-print pytest black anybadge 
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with Pylint
      run: |
        mkdir -p public/badges
        echo undefined > public/badges/$CI_JOB_NAME.score
        ls -a
        - pip install pylint --quiet
        - pip install anybadge
        pylint --rcfile=.pylintrc --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee pylint.txt
        score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt > public/badges/$CI_JOB_NAME.score)
        echo 'Pylint score was $score'
    - name: Lint with flake8
      run: |
        ls -a
        mypy --install-types --non-interactive .
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run python black code formatter
      uses: DataDog/action-py-black-formatter@v2.5
      with:
        # Black additional input arguments.
        
        quiet_mode: true # optional, default is false
        # (--diff) Don't write the files back, just output a diff for each file on stdout.

        print_diff_mode: true # optional, default is false
        # (--check) Don't write the files back, just return the status. Return code 0 means nothing
        # would change. Return code 1 means some files would be reformatted. Return code 123 means
        # there was an internal error.

        check_mode: false # optional, default is false
        # Turn on if you only want to check changed files instead of all files.

        only_changed_files: false # optional, default is false
        # Sha of the commit to compare files to.

    - name: Test with pytest
      run: |
        pytest
